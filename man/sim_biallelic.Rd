% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulate.R
\name{sim_biallelic}
\alias{sim_biallelic}
\title{Simulate biallelic data}
\usage{
sim_biallelic(
  coi = 3,
  plmaf = runif(10, 0, 0.5),
  coverage = 200,
  alpha = 1,
  overdispersion = 0,
  relatedness = 0,
  epsilon = 0
)
}
\arguments{
\item{coi}{Complexity of infection.}

\item{plmaf}{Vector of population-level allele frequencies at each locus.}

\item{coverage}{Coverage at each locus. If a single value then the same
coverage is applied over all loci.}

\item{alpha}{Shape parameter of the symmetric Dirichlet prior on strain
proportions.}

\item{overdispersion}{The extent to which counts are over-dispersed relative
to the binomial distribution. Counts are Beta-binomially distributed, with
the beta distribution having shape parameters
\mjseqn{\frac{p}{overdispersion}} and
\mjseqn{\frac{1-p}{overdispersion}}.}

\item{relatedness}{The probability that a strain in mixed infections is
related to another. Default = 0 (unrelated). The implementation is similar
to relatedness as defined in THE REAL McCOIL simulations. In the original
paper (https://doi.org/10.1371/journal.pcbi.1005348) this is defined as:
"... simulated relatedness (r) among lineages within the same host by
sampling alleles either from an existing lineage within the same host
(with probability r) or from the population (with probability (1-r))."}

\item{epsilon}{The probability of a single read being miscalled as the other
allele. Applies in both directions.}
}
\value{
A list of:
\itemize{
\item \code{coi}: The COI used to simulate the data.
\item \code{strain_proportions}: The strain proportion of each strain.
\item \code{phased}: The phased haplotype.
\item \code{data}: A dataframe of:
\itemize{
\item \code{plmaf}: The population-level allele frequency.
\item \code{coverage}: The coverage at each locus.
\item \code{counts}: The count at each locus.
\item \code{wsmaf}: The within-sample allele frequency.
}
\item \code{inputs}: A dataframe of function input arguments:
\itemize{
\item \code{alpha}: Shape parameters of Dirichlet controlling strain proportions.
\item \code{overdispersion}: Overdispersion in count data.
\item \code{relatedness}: Within sample relatedness between strains.
\item \code{epsilon}: Probability of a single read being miscalled.
}
}
}
\description{
Simulate biallelic data from a simple statistical model. Inputs
include the complexity of infection (COI), population-level allele
frequencies (PLMAF), and some parameters dictating skew and error
distributions. Outputs include the phased haplotypes and the unphased read
count and coverage data.
}
\details{
\loadmathjax
Simulated data are drawn from a simple statistical model:
\enumerate{
\item Strain proportions are drawn from a symmetric Dirichlet
distribution with shape parameter \code{alpha}.
\item Phased haplotypes are drawn at every locus, one for each
\code{coi}. The allele at each locus is drawn from a Bernoulli
distribution with probability given by the \code{plmaf}.
\item The "true" within-sample allele frequency at every locus is
obtained by multiplying haplotypes by their strain proportions, and
summing over haplotypes. Errors are introduced through the equation
\mjsdeqn{wsmaf_{error} = wsmaf(1-e) + (1-wsmaf)e}
where \mjseqn{wsmaf} is the WSMAF without error and \mjseqn{e} is
the error parameter \code{epsilon}.
\item Final read counts are drawn from a beta-binomial distribution with
expectation \mjseqn{w_{error}}. The raw number of draws is given by the
\code{coverage}, and the skew of the distribution is given by the
\code{overdispersion} parameter. If the \code{overdispersion} is equal to
zero, then the distribution is binomial, rather than beta-binomial.
}
}
\seealso{
Other simulated data functions: 
\code{\link{process_sim}()}
}
\concept{simulated data functions}
