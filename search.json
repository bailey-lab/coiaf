[{"path":"https://bailey-lab.github.io/coiaf/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 coiaf authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://bailey-lab.github.io/coiaf/articles/example_real_data.html","id":"data-structure","dir":"Articles","previous_headings":"","what":"Data structure","title":"Real data example","text":"algorithms developed package require input data set containing population-level minor allele frequency (PLMAF), within-sample minor allele frequency (WSMAF), within-sample coverage across set loci. note package leverages population-level within-sample minor allele frequencies run, user may also input population-level within-sample allele frequencies reference allele. package built-capabilities convert values allele frequencies minor allele. example real data set included package contains matrix WSAFs multiple samples across several loci, sample represented rows locus represented columns. first 5 rows 3 columns example real data set included package shown : Given information, may determine PLAF averaging WSAF samples across locus, follows: WSAF PLAF, can generate input data frame. However, algorithms work per sample basis, must generate list input data frames:","code":"print(example_real_data[1:5, 1:3]) #>          Pf3D7_01_v3_94422 Pf3D7_01_v3_95518 Pf3D7_01_v3_100608 #> FP0024-C         0.8205128        0.43548387          0.4972067 #> FP0025-C         1.0000000        0.00000000          1.0000000 #> FP0028-C         0.7389381        0.48000000          1.0000000 #> FP0029-C         1.0000000        1.00000000          1.0000000 #> FP0030-C         0.6250000        0.01882353          1.0000000 plaf <- colMeans(example_real_data, na.rm = TRUE) input_data <- purrr::map(seq_len(nrow(example_real_data)), function(i) {   tibble::tibble(wsmaf = example_real_data[i, ], plmaf = plaf) %>%     tidyr::drop_na() })"},{"path":"https://bailey-lab.github.io/coiaf/articles/example_real_data.html","id":"estimate-the-coi","dir":"Articles","previous_headings":"","what":"Estimate the COI","title":"Real data example","text":"input data set now generated, run estimate COI, users can use compute_coi() optimize_coi() function, depending whether discrete continuous value COI desired. illustrate estimating discrete COI: estimation functions return estimated COI. cases, additional information also returned.","code":"# Estimate the COI of a single sample optimize_coi(input_data[[1]], data_type = \"real\") #> [1] 1.2079  # Estimating the COI of multiple samples purrr::map_dbl(input_data, ~ optimize_coi(.x, data_type = \"real\")) #>  [1] 1.2079 1.7896 1.1241 1.0550 1.0708 1.1313 1.0500 1.0722 1.9574 1.0143"},{"path":"https://bailey-lab.github.io/coiaf/articles/example_real_data.html","id":"data-visualization","dir":"Articles","previous_headings":"","what":"Data visualization","title":"Real data example","text":"recommend exploring ggplot2 package plot results. Graph Gallery beautiful website graphs demos may provide inspiration.","code":""},{"path":"https://bailey-lab.github.io/coiaf/articles/sensitivity_analysis_continuous.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Continuous sensitivity analysis","text":"analysis file, aim understand effect varying parameters COI framework. examine simulation estimation parameters. parameters examine : coverage: Coverage locus. loci: number loci. alpha: Shape parameter symmetric Dirichlet prior strain proportions. overdispersion: extent counts -dispersed relative binomial distribution. Counts Beta-binomially distributed, beta distribution shape parameters \\(p/\\text{overdispersion}\\) \\((1-p) / \\text{overdispersion}\\). relatedness: probability strain mixed infections related another. epsilon: probability single read miscalled allele. Applies directions. coi: complexity infection sample. seq_error: level sequencing error assumed. use_bins: Whether group data estimating COI. bin_size: minimum size bin data.","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/coiaf/articles/sensitivity_analysis_continuous.html","id":"setting-our-plmaf","dir":"Articles","previous_headings":"Introduction","what":"Setting our PLMAF","title":"Continuous sensitivity analysis","text":"","code":"# Set the seed set.seed(1)  # Define number of loci, and distribution of minor allele frequencies L <- 1e3 p <- stats::rbeta(L, 1, 5) p[p > 0.5] <- 1 - p[p > 0.5]"},{"path":"https://bailey-lab.github.io/coiaf/articles/sensitivity_analysis_continuous.html","id":"overall-performance","dir":"Articles","previous_headings":"Introduction","what":"Overall performance","title":"Continuous sensitivity analysis","text":"","code":"toverall <- cont_sensitivity(   coi = 1:20,   repetitions = 100,   plmaf = p,   coverage = 200,   seq_error = 0,   coi_method = c(\"variant\", \"frequency\") )  toverall_image <- sensitivity_plot(   data = toverall,   dims = c(1, 2),   result_type = \"cont\",   title = \"Predicted COI\",   sub_title = c(\"Variant Method\", \"Frequency Method\") )  toverall_error <- error_plot(   data = toverall,   fill = \"coi_method\",   legend_title = \"COI Method\",   title = \"Error\",   fill_levels = c(\"Variant Method\", \"Frequency Method\") )  toverall_fig <- toverall_image / toverall_error +   plot_annotation(     tag_levels = \"A\",     theme = theme(plot.tag = element_text(size = 10))   ) +   theme(legend.position = \"bottom\")  toverall_fig"},{"path":[]},{"path":"https://bailey-lab.github.io/coiaf/articles/sensitivity_analysis_continuous.html","id":"coverage","dir":"Articles","previous_headings":"Simulation parameters","what":"Coverage","title":"Continuous sensitivity analysis","text":"","code":"tcoverage_1 <- cont_sensitivity(   coi = 2:20,   coverage = c(50, 100, 250, 500, 1000, 2000),   repetitions = 100,   seq_error = 0.01,   plmaf = p,   coi_method = \"variant\" )  tcoverage_image_1 <- sensitivity_plot(   data = tcoverage_1,   result_type = \"cont\",   title = \"Predicted COI\",   dims = c(2, 3),   sub_title = paste0(\"Coverage = \", c(50, 100, 250, 500, 1000, 2000)) )  tcoverage_error_1 <- error_plot(   tcoverage_1,   fill = \"coverage\",   legend_title = \"Coverage\",   title = \"Error\" )  tcoverage_fig_1 <- tcoverage_image_1 / tcoverage_error_1 +   plot_annotation(     tag_levels = \"A\",     theme = theme(plot.tag = element_text(size = 10))   ) +   plot_layout(heights = c(2, 1)) +   theme(legend.position = \"bottom\")  tcoverage_fig_1 tcoverage_2 <- cont_sensitivity(   coi = 2:20,   coverage = c(50, 100, 250, 500, 1000, 2000),   repetitions = 100,   seq_error = 0.01,   plmaf = p,   coi_method = \"frequency\" )  tcoverage_image_2 <- sensitivity_plot(   data = tcoverage_2,   result_type = \"cont\",   title = \"Predicted COI\",   dims = c(2, 3),   sub_title = paste0(\"Coverage = \", c(50, 100, 250, 500, 1000, 2000)) )  tcoverage_error_2 <- error_plot(   tcoverage_2,   fill = \"coverage\",   legend_title = \"Coverage\",   title = \"Error\" )  tcoverage_fig_2 <- tcoverage_image_2 / tcoverage_error_2 +   plot_annotation(     tag_levels = \"A\",     theme = theme(plot.tag = element_text(size = 10))   ) +   plot_layout(heights = c(2, 1)) +   theme(legend.position = \"bottom\")  tcoverage_fig_2"},{"path":"https://bailey-lab.github.io/coiaf/articles/sensitivity_analysis_continuous.html","id":"loci","dir":"Articles","previous_headings":"Simulation parameters","what":"Loci","title":"Continuous sensitivity analysis","text":"","code":"# Set the range over which we will iterate loci <- c(1e2, 1e3, 1e4)  # For each loci, reset the PLMAF and then run bloci <- lapply(loci, function(new_L) {   new_p <- rbeta(new_L, 1, 5)   new_p[new_p > 0.5] <- 1 - new_p[new_p > 0.5]    inner_tloci <- cont_sensitivity(     coi = 2:20,     repetitions = 100,     plmaf = new_p,     seq_error = 0.01,     coi_method = \"variant\"   )   inner_tloci$param_grid$loci <- new_L   return(inner_tloci) })  # Extract the relevant information for each output: predicted_coi, probability, # param_grid, and boot_error pc <- do.call(cbind, lapply(bloci, function(test) {   return(test$predicted_coi) })) pb <- do.call(cbind, lapply(bloci, function(test) {   return(test$probability) })) pg <- do.call(rbind, lapply(bloci, function(test) {   return(test$param_grid) })) be <- do.call(rbind, lapply(bloci, function(test) {   return(test$boot_error) }))  # Fix the naming for predicted_coi num_cois <- length(unique(pg$coi)) num_repeat_cois <- length(pg$coi) / num_cois names(pc) <- paste(   \"coi\",   pg$coi,   rep(seq(num_repeat_cois), each = num_cois),   sep = \"_\" )  # Create the output tloci_1 <- list(   predicted_coi = pc,   probability   = pb,   param_grid    = pg,   boot_error    = be )  # Plot tloci_image_1 <- sensitivity_plot(   data = tloci_1,   result_type = \"cont\",   title = \"Predicted COI\",   dims = c(1, 3),   sub_title = paste0(\"Loci = \", c(1e2, 1e3, 1e4)) )  # Add a loci column tloci_1$boot_error$loci <- rep(   c(1e2, 1e3, 1e4),   each = length(unique(tloci_1$boot_error$coi)) ) tloci_error_1 <- error_plot(   tloci_1,   fill = \"loci\",   legend_title = \"Loci\",   title = \"Error\" )  tloci_fig_1 <- tloci_image_1 / tloci_error_1 +   plot_annotation(     tag_levels = \"A\",     theme = theme(plot.tag = element_text(size = 10))   ) +   theme(legend.position = \"bottom\")  tloci_fig_1 # Set the range over which we will iterate loci <- c(1e2, 1e3, 1e4)  # For each loci, reset the PLMAF and then run bloci <- lapply(loci, function(new_L) {   new_p <- rbeta(new_L, 1, 5)   new_p[new_p > 0.5] <- 1 - new_p[new_p > 0.5]    inner_tloci <- cont_sensitivity(     coi = 2:20,     repetitions = 100,     plmaf = new_p,     seq_error = 0.01,     coi_method = \"frequency\"   )   inner_tloci$param_grid$loci <- new_L   return(inner_tloci) })  # Extract the relevant information for each output: predicted_coi, probability, # param_grid, and boot_error pc <- do.call(cbind, lapply(bloci, function(test) {   return(test$predicted_coi) })) pb <- do.call(cbind, lapply(bloci, function(test) {   return(test$probability) })) pg <- do.call(rbind, lapply(bloci, function(test) {   return(test$param_grid) })) be <- do.call(rbind, lapply(bloci, function(test) {   return(test$boot_error) }))  # Fix the naming for predicted_coi num_cois <- length(unique(pg$coi)) num_repeat_cois <- length(pg$coi) / num_cois names(pc) <- paste(   \"coi\",   pg$coi,   rep(seq(num_repeat_cois), each = num_cois),   sep = \"_\" )  # Create the output tloci_2 <- list(   predicted_coi = pc,   probability   = pb,   param_grid    = pg,   boot_error    = be )  # Plot tloci_image_2 <- sensitivity_plot(   data = tloci_2,   result_type = \"cont\",   title = \"Predicted COI\",   dims = c(1, 3),   sub_title = paste0(\"Loci = \", c(1e2, 1e3, 1e4)) )  # Add a loci column tloci_2$boot_error$loci <- rep(   c(1e2, 1e3, 1e4),   each = length(unique(tloci_2$boot_error$coi)) ) tloci_error_2 <- error_plot(   tloci_2,   fill = \"loci\",   legend_title = \"Loci\",   title = \"Error\" )  tloci_fig_2 <- tloci_image_2 / tloci_error_2 +   plot_annotation(     tag_levels = \"A\",     theme = theme(plot.tag = element_text(size = 10))   ) +   theme(legend.position = \"bottom\")  tloci_fig_2"},{"path":"https://bailey-lab.github.io/coiaf/articles/sensitivity_analysis_continuous.html","id":"alpha","dir":"Articles","previous_headings":"Simulation parameters","what":"Alpha","title":"Continuous sensitivity analysis","text":"","code":"talpha_1 <- cont_sensitivity(   coi = 2:20,   alpha = seq(0.01, 5.51, 0.5),   repetitions = 100,   seq_error = 0.01,   plmaf = p )  talpha_image_1 <- sensitivity_plot(   data = talpha_1,   result_type = \"cont\",   title = \"Predicted COI\",   dims = c(4, 3),   sub_title = paste0(\"Alpha = \", seq(0.01, 5.51, 0.5)) )  talpha_error_1 <- error_plot(   talpha_1,   fill = \"alpha\",   legend_title = \"Alpha\",   title = \"Error\" )  talpha_fig_1 <- talpha_image_1 / talpha_error_1 +   plot_annotation(     tag_levels = \"A\",     theme = theme(plot.tag = element_text(size = 10))   ) +   plot_layout(heights = c(5, 1)) +   theme(legend.position = \"bottom\")  talpha_fig_1 talpha_2 <- cont_sensitivity(   coi = 2:20,   alpha = seq(0.01, 5.51, 0.5),   repetitions = 100,   seq_error = 0.01,   plmaf = p )  talpha_image_2 <- sensitivity_plot(   data = talpha_2,   result_type = \"cont\",   title = \"Predicted COI\",   dims = c(4, 3),   sub_title = paste0(\"Alpha = \", seq(0.01, 5.51, 0.5)) )  talpha_error_2 <- error_plot(   talpha_2,   fill = \"alpha\",   legend_title = \"Alpha\",   title = \"Error\" )  talpha_fig_2 <- talpha_image_2 / talpha_error_2 +   plot_annotation(     tag_levels = \"A\",     theme = theme(plot.tag = element_text(size = 10))   ) +   plot_layout(heights = c(5, 1)) +   theme(legend.position = \"bottom\")  talpha_fig_2"},{"path":"https://bailey-lab.github.io/coiaf/articles/sensitivity_analysis_continuous.html","id":"overdispersion","dir":"Articles","previous_headings":"Simulation parameters","what":"Overdispersion","title":"Continuous sensitivity analysis","text":"","code":"tover <- cont_sensitivity(   coi = 2:20,   overdispersion = seq(0, 0.25, 0.05),   repetitions = 100,   seq_error = 0.01,   plmaf = p,   coi_method = c(\"variant\", \"frequency\") )  tover_image <- sensitivity_plot(   data = tover,   result_type = \"cont\",   title = \"Predicted COI\",   dims = c(4, 3),   sub_title = paste0(     rep(c(\"Var, \", \"Freq, \"), each = 6),     \"Dispersion = \",     seq(0, 0.25, 0.05)   ) )  tover_error <- error_plot(   tover,   fill = \"overdispersion\",   legend_title = \"Overdispersion\",   title = \"Error\",   second_fill = \"coi_method\" )  tover_fig <- tover_image / tover_error +   plot_annotation(     tag_levels = \"A\",     theme = theme(plot.tag = element_text(size = 10))   ) +   plot_layout(heights = c(5, 1)) +   theme(legend.position = \"bottom\")  tover_fig"},{"path":"https://bailey-lab.github.io/coiaf/articles/sensitivity_analysis_continuous.html","id":"relatedness","dir":"Articles","previous_headings":"Simulation parameters","what":"Relatedness","title":"Continuous sensitivity analysis","text":"","code":"trelated <- cont_sensitivity(   coi = 2:20,   relatedness = seq(0, 0.5, 0.1),   repetitions = 100,   seq_error = 0.01,   plmaf = p,   coi_method = c(\"variant\", \"frequency\") )  trelated_image <- sensitivity_plot(   data = trelated,   result_type = \"cont\",   title = \"Predicted COI\",   dims = c(4, 3),   sub_title = paste(     paste0(\"Related =  \", seq(0, 0.5, 0.1)),     rep(c(\"Variant Method\", \"Frequency Method\"), each = 6),     sep = \", \"   ) )  trelated_error <- error_plot(   trelated,   fill = \"relatedness\",   legend_title = \"Related\",   title = \"Error\",   second_fill = \"coi_method\" )  trelated_fig <- trelated_image / trelated_error +   plot_annotation(     tag_levels = \"A\",     theme = theme(plot.tag = element_text(size = 10))   ) +   plot_layout(heights = c(6, 1)) +   theme(legend.position = \"bottom\")  trelated_fig"},{"path":"https://bailey-lab.github.io/coiaf/articles/sensitivity_analysis_continuous.html","id":"epsilon","dir":"Articles","previous_headings":"Simulation parameters","what":"Epsilon","title":"Continuous sensitivity analysis","text":"","code":"tepsilon <- cont_sensitivity(   coi = 2:20,   epsilon = seq(0, 0.025, 0.005),   repetitions = 100,   seq_error = 0.01,   plmaf = p,   coi_method = c(\"variant\", \"frequency\") )  tepsilon_image <- sensitivity_plot(   data = tepsilon,   result_type = \"cont\",   title = \"Predicted COI\",   dims = c(4, 3),   sub_title = paste0(     rep(c(\"Var, \", \"Freq, \"), each = 6),     \"Epsilon = \",     seq(0, 0.025, 0.005)   ) )  tepsilon_error <- error_plot(   tepsilon,   fill = \"epsilon\",   legend_title = \"Epsilon\",   title = \"Error\",   second_fill = \"coi_method\" )  tepsilon_fig <- tepsilon_image / tepsilon_error +   plot_annotation(     tag_levels = \"A\",     theme = theme(plot.tag = element_text(size = 10))   ) +   plot_layout(heights = c(3, 1)) +   theme(legend.position = \"bottom\")  tepsilon_fig"},{"path":[]},{"path":"https://bailey-lab.github.io/coiaf/articles/sensitivity_analysis_continuous.html","id":"coi","dir":"Articles","previous_headings":"Estimation parameters","what":"COI","title":"Continuous sensitivity analysis","text":"","code":"tcoi <- cont_sensitivity(   coi = 2:40,   max_coi = 40,   repetitions = 100,   plmaf = p,   seq_error = 0.01,   coi_method = c(\"variant\", \"frequency\") )  tcoi_image <- sensitivity_plot(   data = tcoi,   dims = c(1, 2),   result_type = \"cont\",   title = \"Predicted COI\",   sub_title = c(\"Variant Method\", \"Frequency Method\") )  tcoi_error <- error_plot(   tcoi,   fill = \"coi_method\",   legend_title = \"COI Method\",   title = \"Error\",   fill_levels = c(\"Variant Method\", \"Frequency Method\") )  tcoi_fig <- tcoi_image / tcoi_error +   plot_annotation(     tag_levels = \"A\",     theme = theme(plot.tag = element_text(size = 10))   ) +   theme(legend.position = \"bottom\")  tcoi_fig"},{"path":"https://bailey-lab.github.io/coiaf/articles/sensitivity_analysis_continuous.html","id":"sequencing-error","dir":"Articles","previous_headings":"Estimation parameters","what":"Sequencing error","title":"Continuous sensitivity analysis","text":"","code":"tseq <- cont_sensitivity(   coi = 2:20,   epsilon = 0.01,   seq_error = seq(0, 0.10, 0.02),   repetitions = 100,   plmaf = p,   coi_method = c(\"variant\", \"frequency\") )  tseq_image <- sensitivity_plot(   data = tseq,   result_type = \"cont\",   title = \"Predicted COI\",   dims = c(4, 3),   sub_title = paste0(     rep(c(\"Variant, \", \"Frequency, \"), each = 6),     \"Seq Error = \",     seq(0, 0.12, 0.02)   ) )  tseq_error <- error_plot(   tseq,   fill = \"seq_error\",   legend_title = \"Sequence Error\",   title = \"Error\" )  tseq_fig <- tseq_image / tseq_error +   plot_annotation(     tag_levels = \"A\",     theme = theme(plot.tag = element_text(size = 10))   ) +   plot_layout(heights = c(5, 1)) +   theme(legend.position = \"bottom\")  tseq_fig"},{"path":"https://bailey-lab.github.io/coiaf/articles/sensitivity_analysis_continuous.html","id":"bins","dir":"Articles","previous_headings":"Estimation parameters","what":"Bins","title":"Continuous sensitivity analysis","text":"","code":"tbin <- cont_sensitivity(   coi = 2:20,   use_bins = c(TRUE, FALSE),   plmaf = p,   repetitions = 100,   coi_method = c(\"variant\", \"frequency\") )  tbin_image <- sensitivity_plot(   data = tbin,   result_type = \"cont\",   title = \"Predicted COI\",   dims = c(2, 2),   sub_title = paste(     c(\"Variant Method,\", \"Frequency Method,\"),     \"Bins =\",     rep(c(TRUE, FALSE), each = 2)   ) )  tbin_error <- error_plot(   tbin,   fill = \"use_bins\",   fill_levels = as.character(c(TRUE, FALSE)),   legend_title = \"COI Method\",   title = \"Error\",   second_fill = \"coi_method\" )  tbin_fig <- tbin_image / tbin_error +   plot_annotation(     tag_levels = \"A\",     theme = theme(plot.tag = element_text(size = 10))   ) +   plot_layout(heights = c(3, 1)) +   theme(legend.position = \"bottom\")  tbin_fig"},{"path":"https://bailey-lab.github.io/coiaf/articles/sensitivity_analysis_continuous.html","id":"bin-size","dir":"Articles","previous_headings":"Estimation parameters","what":"Bin size","title":"Continuous sensitivity analysis","text":"","code":"tbin_size <- cont_sensitivity(   coi = 2:20,   use_bins = TRUE,   bin_size = seq(10, 100, 30),   plmaf = p,   repetitions = 100,   seq_error = 0.01,   coi_method = c(\"variant\", \"frequency\") )  tbin_size_image <- sensitivity_plot(   data = tbin_size,   result_type = \"cont\",   title = \"Predicted COI\",   dims = c(2, 4),   sub_title = rep(paste(\"Bin Size =\", seq(10, 100, 30)), 2) )  tbin_size_error <- error_plot(   tbin_size,   fill = \"bin_size\",   fill_levels = as.character(seq(10, 100, 30)),   legend_title = \"COI Method\",   title = \"Error\" )  tbin_size_fig <- tbin_size_image / tbin_size_error +   plot_annotation(     tag_levels = \"A\",     theme = theme(plot.tag = element_text(size = 10))   ) +   plot_layout(heights = c(3, 1)) +   theme(legend.position = \"bottom\")  tbin_size_fig"},{"path":"https://bailey-lab.github.io/coiaf/articles/sensitivity_analysis_discrete.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Discrete sensitivity analysis","text":"analysis file, aim understand effect varying parameters COI framework. examine simulation estimation parameters. parameters examine : coverage: Coverage locus. loci: number loci. alpha: Shape parameter symmetric Dirichlet prior strain proportions. overdispersion: extent counts -dispersed relative binomial distribution. Counts Beta-binomially distributed, beta distribution shape parameters \\(p/\\text{overdispersion}\\) \\((1-p) / \\text{overdispersion}\\). relatedness: probability strain mixed infections related another. epsilon: probability single read miscalled allele. Applies directions. coi: complexity infection sample. seq_error: level sequencing error assumed. use_bins: Whether group data estimating COI. bin_size: minimum size bin data.","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/coiaf/articles/sensitivity_analysis_discrete.html","id":"setting-our-plmaf","dir":"Articles","previous_headings":"Introduction","what":"Setting our PLMAF","title":"Discrete sensitivity analysis","text":"","code":"# Set the seed set.seed(1)  # Define number of loci, and distribution of minor allele frequencies L <- 1e3 p <- stats::rbeta(L, 1, 5) p[p > 0.5] <- 1 - p[p > 0.5]"},{"path":"https://bailey-lab.github.io/coiaf/articles/sensitivity_analysis_discrete.html","id":"overall-performance","dir":"Articles","previous_headings":"Introduction","what":"Overall performance","title":"Discrete sensitivity analysis","text":"","code":"toverall <- disc_sensitivity(   coi = 1:20,   repetitions = 100,   plmaf = p,   coverage = 200,   seq_error = 0,   coi_method = c(\"variant\", \"frequency\") )  toverall_image <- sensitivity_plot(   data = toverall,   dims = c(1, 2),   result_type = \"disc\",   title = \"Predicted COI\",   sub_title = c(\"Variant Method\", \"Frequency Method\") )  toverall_error <- error_plot(   data = toverall,   fill = \"coi_method\",   legend_title = \"COI Method\",   title = \"Error\",   fill_levels = c(\"Variant Method\", \"Frequency Method\") )  toverall_fig <- toverall_image / toverall_error +   plot_annotation(     tag_levels = \"A\",     theme = theme(plot.tag = element_text(size = 10))   ) +   theme(legend.position = \"bottom\")  toverall_fig"},{"path":[]},{"path":"https://bailey-lab.github.io/coiaf/articles/sensitivity_analysis_discrete.html","id":"coverage","dir":"Articles","previous_headings":"Simulation parameters","what":"Coverage","title":"Discrete sensitivity analysis","text":"","code":"tcoverage_1 <- disc_sensitivity(   coi = 2:20,   coverage = c(50, 100, 250, 500, 1000, 2000),   repetitions = 100,   seq_error = 0.01,   plmaf = p,   coi_method = \"variant\" )  tcoverage_image_1 <- sensitivity_plot(   data = tcoverage_1,   result_type = \"disc\",   title = \"Predicted COI\",   dims = c(2, 3),   sub_title = paste0(\"Coverage = \", c(50, 100, 250, 500, 1000, 2000)) )  tcoverage_error_1 <- error_plot(   tcoverage_1,   fill = \"coverage\",   legend_title = \"Coverage\",   title = \"Error\" )  tcoverage_fig_1 <- tcoverage_image_1 / tcoverage_error_1 +   plot_annotation(     tag_levels = \"A\",     theme = theme(plot.tag = element_text(size = 10))   ) +   plot_layout(heights = c(2, 1)) +   theme(legend.position = \"bottom\")  tcoverage_fig_1 tcoverage_2 <- disc_sensitivity(   coi = 2:20,   coverage = c(50, 100, 250, 500, 1000, 2000),   repetitions = 100,   seq_error = 0.01,   plmaf = p, coi_method = \"frequency\" )  tcoverage_image_2 <- sensitivity_plot(   data = tcoverage_2,   result_type = \"disc\",   title = \"Predicted COI\",   dims = c(2, 3),   sub_title = paste0(\"Coverage = \", c(50, 100, 250, 500, 1000, 2000)) )  tcoverage_error_2 <- error_plot(   tcoverage_2,   fill = \"coverage\",   legend_title = \"Coverage\",   title = \"Error\" )  tcoverage_fig_2 <- tcoverage_image_2 / tcoverage_error_2 +   plot_annotation(     tag_levels = \"A\",     theme = theme(plot.tag = element_text(size = 10))   ) +   plot_layout(heights = c(2, 1)) +   theme(legend.position = \"bottom\")  tcoverage_fig_2"},{"path":"https://bailey-lab.github.io/coiaf/articles/sensitivity_analysis_discrete.html","id":"loci","dir":"Articles","previous_headings":"Simulation parameters","what":"Loci","title":"Discrete sensitivity analysis","text":"","code":"# Set the range over which we will iterate loci <- c(1e2, 1e3, 1e4)  # For each loci, reset the PLMAF and then run bloci <- lapply(loci, function(new_L) {   new_p <- rbeta(new_L, 1, 5)   new_p[new_p > 0.5] <- 1 - new_p[new_p > 0.5]    inner_tloci <- disc_sensitivity(     coi = 2:20,     repetitions = 100,     plmaf = new_p,     seq_error = 0.01,     coi_method = \"variant\"   )   inner_tloci$param_grid$loci <- new_L   return(inner_tloci) })  # Extract the relevant information for each output: predicted_coi, probability, # param_grid, and boot_error pc <- do.call(cbind, lapply(bloci, function(test) {   return(test$predicted_coi) })) pb <- do.call(cbind, lapply(bloci, function(test) {   return(test$probability) })) pg <- do.call(rbind, lapply(bloci, function(test) {   return(test$param_grid) })) be <- do.call(rbind, lapply(bloci, function(test) {   return(test$boot_error) }))  # Fix the naming for predicted_coi num_cois <- length(unique(pg$coi)) num_repeat_cois <- length(pg$coi) / num_cois names(pc) <- paste(   \"coi\",   pg$coi,   rep(seq(num_repeat_cois), each = num_cois),   sep = \"_\" )  # Create the output tloci_1 <- list(   predicted_coi = pc,   probability   = pb,   param_grid    = pg,   boot_error    = be )  # Plot tloci_image_1 <- sensitivity_plot(   data = tloci_1,   result_type = \"disc\",   title = \"Predicted COI\",   dims = c(1, 3),   sub_title = paste0(\"Loci = \", c(1e2, 1e3, 1e4)) )  # Add a loci column tloci_1$boot_error$loci <- rep(   c(1e2, 1e3, 1e4),   each = length(unique(tloci_1$boot_error$coi)) ) tloci_error_1 <- error_plot(   tloci_1,   fill = \"loci\",   legend_title = \"Loci\",   title = \"Error\" )  tloci_fig_1 <- tloci_image_1 / tloci_error_1 +   plot_annotation(     tag_levels = \"A\",     theme = theme(plot.tag = element_text(size = 10))   ) +   theme(legend.position = \"bottom\")  tloci_fig_1 # Set the range over which we will iterate loci <- c(1e2, 1e3, 1e4)  # For each loci, reset the PLMAF and then run bloci <- lapply(loci, function(new_L) {   new_p <- rbeta(new_L, 1, 5)   new_p[new_p > 0.5] <- 1 - new_p[new_p > 0.5]    inner_tloci <- disc_sensitivity(     coi = 2:20,     repetitions = 100,     plmaf = new_p,     seq_error = 0.01,     coi_method = \"frequency\"   )   inner_tloci$param_grid$loci <- new_L   return(inner_tloci) })  # Extract the relevant information for each output: predicted_coi, probability, # param_grid, and boot_error pc <- do.call(cbind, lapply(bloci, function(test) {   return(test$predicted_coi) })) pb <- do.call(cbind, lapply(bloci, function(test) {   return(test$probability) })) pg <- do.call(rbind, lapply(bloci, function(test) {   return(test$param_grid) })) be <- do.call(rbind, lapply(bloci, function(test) {   return(test$boot_error) }))  # Fix the naming for predicted_coi num_cois <- length(unique(pg$coi)) num_repeat_cois <- length(pg$coi) / num_cois names(pc) <- paste(   \"coi\",   pg$coi,   rep(seq(num_repeat_cois), each = num_cois),   sep = \"_\" )  # Create the output tloci_2 <- list(   predicted_coi = pc,   probability   = pb,   param_grid    = pg,   boot_error    = be )  # Plot tloci_image_2 <- sensitivity_plot(   data = tloci_2,   result_type = \"disc\",   title = \"Predicted COI\",   dims = c(1, 3),   sub_title = paste0(\"Loci = \", c(1e2, 1e3, 1e4)) )  # Add a loci column tloci_2$boot_error$loci <- rep(   c(1e2, 1e3, 1e4),   each = length(unique(tloci_2$boot_error$coi)) ) tloci_error_2 <- error_plot(   tloci_2,   fill = \"loci\",   legend_title = \"Loci\",   title = \"Error\" )  tloci_fig_2 <- tloci_image_2 / tloci_error_2 +   plot_annotation(     tag_levels = \"A\",     theme = theme(plot.tag = element_text(size = 10))   ) +   theme(legend.position = \"bottom\")  tloci_fig_2"},{"path":"https://bailey-lab.github.io/coiaf/articles/sensitivity_analysis_discrete.html","id":"alpha","dir":"Articles","previous_headings":"Simulation parameters","what":"Alpha","title":"Discrete sensitivity analysis","text":"","code":"talpha_1 <- disc_sensitivity(   coi = 2:20,   alpha = seq(0.01, 5.51, 0.5),   repetitions = 100,   seq_error = 0.01,   plmaf = p,   coi_method = \"variant\" )  talpha_image_1 <- sensitivity_plot(   data = talpha_1,   result_type = \"disc\",   title = \"Predicted COI\",   dims = c(4, 3),   sub_title = paste0(\"Alpha = \", seq(0.01, 5.51, 0.5)) )  talpha_error_1 <- error_plot(   talpha_1,   fill = \"alpha\",   legend_title = \"Alpha\",   title = \"Error\" )  talpha_fig_1 <- talpha_image_1 / talpha_error_1 +   plot_annotation(     tag_levels = \"A\",     theme = theme(plot.tag = element_text(size = 10))   ) +   plot_layout(heights = c(5, 1)) +   theme(legend.position = \"bottom\")  talpha_fig_1 talpha_2 <- disc_sensitivity(   coi = 2:20,   alpha = seq(0.01, 5.51, 0.5),   repetitions = 100,   seq_error = 0.01,   plmaf = p,   coi_method = \"frequency\" )  talpha_image_2 <- sensitivity_plot(   data = talpha_2,   result_type = \"disc\",   title = \"Predicted COI\",   dims = c(4, 3),   sub_title = paste0(\"Alpha = \", seq(0.01, 5.51, 0.5)) )  talpha_error_2 <- error_plot(   talpha_2,   fill = \"alpha\",   legend_title = \"Alpha\",   title = \"Error\" )  talpha_fig_2 <- talpha_image_2 / talpha_error_2 +   plot_annotation(     tag_levels = \"A\",     theme = theme(plot.tag = element_text(size = 10))   ) +   plot_layout(heights = c(5, 1)) +   theme(legend.position = \"bottom\")  talpha_fig_2"},{"path":"https://bailey-lab.github.io/coiaf/articles/sensitivity_analysis_discrete.html","id":"overdispersion","dir":"Articles","previous_headings":"Simulation parameters","what":"Overdispersion","title":"Discrete sensitivity analysis","text":"","code":"tover <- disc_sensitivity(   coi = 2:20,   overdispersion = seq(0, 0.25, 0.05),   repetitions = 100,   seq_error = 0.01,   plmaf = p,   coi_method = c(\"variant\", \"frequency\") )  tover_image <- sensitivity_plot(   data = tover,   result_type = \"disc\",   title = \"Predicted COI\",   dims = c(4, 3),   sub_title = paste0(     rep(c(\"Var, \", \"Freq, \"), each = 6),     \"Dispersion = \",     seq(0, 0.25, 0.05)   ) )  tover_error <- error_plot(   tover,   fill = \"overdispersion\",   legend_title = \"Overdispersion\",   title = \"Error\",   second_fill = \"coi_method\" )  tover_fig <- tover_image / tover_error +   plot_annotation(     tag_levels = \"A\",     theme = theme(plot.tag = element_text(size = 10))   ) +   plot_layout(heights = c(5, 1)) +   theme(legend.position = \"bottom\")  tover_fig"},{"path":"https://bailey-lab.github.io/coiaf/articles/sensitivity_analysis_discrete.html","id":"relatedness","dir":"Articles","previous_headings":"Simulation parameters","what":"Relatedness","title":"Discrete sensitivity analysis","text":"","code":"trelated <- disc_sensitivity(   coi = 2:20,   relatedness = seq(0, 0.5, 0.1),   repetitions = 100,   seq_error = 0.01,   plmaf = p,   coi_method = c(\"variant\", \"frequency\") )  trelated_image <- sensitivity_plot(   data = trelated,   result_type = \"disc\",   title = \"Predicted COI\",   dims = c(4, 3),   sub_title = paste(     paste0(\"Relatedness =  \", seq(0, 0.5, 0.1)),     rep(c(\"Variant\", \"Frequency\"), each = 6),     sep = \", \"   ) )  trelated_error <- error_plot(   trelated,   fill = \"relatedness\",   legend_title = \"Related\",   title = \"Error\",   second_fill = \"coi_method\" )  trelated_fig <- trelated_image / trelated_error +   plot_annotation(     tag_levels = \"A\",     theme = theme(plot.tag = element_text(size = 10))   ) +   plot_layout(heights = c(6, 1)) +   theme(legend.position = \"bottom\")  trelated_fig"},{"path":"https://bailey-lab.github.io/coiaf/articles/sensitivity_analysis_discrete.html","id":"epsilon","dir":"Articles","previous_headings":"Simulation parameters","what":"Epsilon","title":"Discrete sensitivity analysis","text":"","code":"tepsilon <- disc_sensitivity(   coi = 2:20,   epsilon = seq(0, 0.025, 0.005),   repetitions = 100,   seq_error = 0.01,   plmaf = p,   coi_method = c(\"variant\", \"frequency\") )  tepsilon_image <- sensitivity_plot(   data = tepsilon,   result_type = \"disc\",   title = \"Predicted COI\",   dims = c(4, 3),   sub_title = paste0(     rep(c(\"Var, \", \"Freq, \"), each = 6),     \"Epsilon = \",     seq(0, 0.025, 0.005)   ) )  tepsilon_error <- error_plot(   tepsilon,   fill = \"epsilon\",   legend_title = \"Epsilon\",   title = \"Error\",   second_fill = \"coi_method\" )  tepsilon_fig <- tepsilon_image / tepsilon_error +   plot_annotation(     tag_levels = \"A\",     theme = theme(plot.tag = element_text(size = 10))   ) +   plot_layout(heights = c(3, 1)) +   theme(legend.position = \"bottom\")  tepsilon_fig"},{"path":[]},{"path":"https://bailey-lab.github.io/coiaf/articles/sensitivity_analysis_discrete.html","id":"coi","dir":"Articles","previous_headings":"Estimation parameters","what":"COI","title":"Discrete sensitivity analysis","text":"","code":"tcoi <- disc_sensitivity(   coi = 2:40,   max_coi = 40,   repetitions = 100,   plmaf = p,   seq_error = 0.01,   coi_method = c(\"variant\", \"frequency\") )  tcoi_image <- sensitivity_plot(   data = tcoi,   dims = c(1, 2),   result_type = \"disc\",   title = \"Predicted COI\",   sub_title = c(\"Variant Method\", \"Frequency Method\") )  tcoi_error <- error_plot(   tcoi,   fill = \"coi_method\",   legend_title = \"COI Method\",   title = \"Error\",   fill_levels = c(\"Variant Method\", \"Frequency Method\") )  tcoi_fig <- tcoi_image / tcoi_error +   plot_annotation(     tag_levels = \"A\",     theme = theme(plot.tag = element_text(size = 10))   ) +   theme(legend.position = \"bottom\")  tcoi_fig"},{"path":"https://bailey-lab.github.io/coiaf/articles/sensitivity_analysis_discrete.html","id":"sequencing-error","dir":"Articles","previous_headings":"Estimation parameters","what":"Sequencing error","title":"Discrete sensitivity analysis","text":"","code":"tseq <- disc_sensitivity(   coi = 2:20,   epsilon = 0.01,   seq_error = seq(0, 0.10, 0.02),   repetitions = 100,   plmaf = p,   coi_method = c(\"variant\", \"frequency\") )  tseq_image <- sensitivity_plot(   data = tseq,   result_type = \"disc\",   title = \"Predicted COI\",   dims = c(4, 3),   sub_title = paste0(     rep(c(\"Variant, \", \"Frequency, \"), each = 6),     \"Seq Error = \",     seq(0, 0.12, 0.02)   ) )  tseq_error <- error_plot(   tseq,   fill = \"seq_error\",   legend_title = \"Sequence Error\",   title = \"Error\",   second_fill = \"coi_method\" )  tseq_fig <- tseq_image / tseq_error +   plot_annotation(     tag_levels = \"A\",     theme = theme(plot.tag = element_text(size = 10))   ) +   plot_layout(heights = c(5, 1)) +   theme(legend.position = \"bottom\")  tseq_fig"},{"path":"https://bailey-lab.github.io/coiaf/articles/sensitivity_analysis_discrete.html","id":"bins","dir":"Articles","previous_headings":"Estimation parameters","what":"Bins","title":"Discrete sensitivity analysis","text":"","code":"tbin <- disc_sensitivity(   coi = 2:20,   use_bins = c(TRUE, FALSE),   plmaf = p,   repetitions = 100,   coi_method = c(\"variant\", \"frequency\") )  tbin_image <- sensitivity_plot(   data = tbin,   result_type = \"disc\",   title = \"Predicted COI\",   dims = c(2, 2),   sub_title = paste(     c(\"Variant Method,\", \"Frequency Method,\"),     \"Bins =\",     rep(c(TRUE, FALSE), each = 2)   ) )  tbin_error <- error_plot(   tbin,   fill = \"use_bins\",   fill_levels = as.character(c(TRUE, FALSE)),   legend_title = \"COI Method\",   title = \"Error\",   second_fill = \"coi_method\" )  tbin_fig <- tbin_image / tbin_error +   plot_annotation(     tag_levels = \"A\",     theme = theme(plot.tag = element_text(size = 10))   ) +   plot_layout(heights = c(3, 1)) +   theme(legend.position = \"bottom\")  tbin_fig"},{"path":"https://bailey-lab.github.io/coiaf/articles/sensitivity_analysis_discrete.html","id":"bin-size","dir":"Articles","previous_headings":"Estimation parameters","what":"Bin size","title":"Discrete sensitivity analysis","text":"","code":"tbin_size <- disc_sensitivity(   coi = 2:20,   use_bins = TRUE,   bin_size = seq(10, 100, 30),   plmaf = p,   repetitions = 100,   seq_error = 0.01,   coi_method = c(\"variant\", \"frequency\") )  tbin_size_image <- sensitivity_plot(   data = tbin_size,   result_type = \"disc\",   title = \"Predicted COI\",   dims = c(2, 4),   sub_title = rep(paste(\"Bin Size =\", seq(10, 100, 30)), 2) )  tbin_size_error <- error_plot(   tbin_size,   fill = \"bin_size\",   fill_levels = as.character(seq(10, 100, 30)),   legend_title = \"COI Method\",   title = \"Error\" )  tbin_size_fig <- tbin_size_image / tbin_size_error +   plot_annotation(     tag_levels = \"A\",     theme = theme(plot.tag = element_text(size = 10))   ) +   plot_layout(heights = c(3, 1)) +   theme(legend.position = \"bottom\")  tbin_size_fig"},{"path":"https://bailey-lab.github.io/coiaf/articles/simulator_details.html","id":"example-simulation","dir":"Articles","previous_headings":"","what":"Example simulation","title":"Simulator details","text":"package defines function sim_biallelic() can easily used simulate data given sample. use , user may simply specify COI simulated sample population level minor allele frequency (PLMAF). outputs function include phased haplotypes within sample minor allele frequencies (WSMAF) locus.  Internally, function goes several steps generate final output. first step generating simulated data generate population level minor allele frequency (PLMAF). , sample Beta distribution. cases COI greater 1, multiple strains differing proportions sample. order determine proportion strain present sample, sample Dirichlet distribution. order determine within sample minor allele frequency (WSMAF) locus, must determine phased haplotype strain. , draw Binomial distribution probabilities given PLMAF. determine true WSMAF, can simply combine haplotype information strain proportions—finding sum strain proportions strains minor allele particular locus. Lastly, generate final simulated WSMAF account sequencing error, sample number sequence reads minor allele locus, determine WSMAF dividing number reads minor allele coverage locus.","code":"simulation <- sim_biallelic(2, plmaf = runif(1000, 0, 0.5)) plot(simulation) # Set the seed set.seed(1)  # Define number of loci and the PLMAF n_loci <- 5 plmaf <- rbeta(n_loci, 1, 5) plmaf[plmaf > 0.5] <- 1 - plmaf[plmaf > 0.5] strain_p <- coiaf:::rdirichlet(rep(alpha, COI)) haplotype <- mapply(function(x) rbinom(COI, 1, x), x = plmaf) true_wsmaf <- colSums(sweep(haplotype, 1, strain_p, \"*\"))  # Rounding errors can cause numbers greater than 1 true_wsmaf[true_wsmaf > 1] <- 1L # Account for sequencing error true_wsmaf <- true_wsmaf * (1 - epsilon) + (1 - true_wsmaf) * epsilon  # Sample sequence reads counts <- rbinom(n_loci, size = rep(coverage, n_loci), prob = true_wsmaf)  # Determine simulated WSMAF sim_wsmaf <- counts / coverage"},{"path":"https://bailey-lab.github.io/coiaf/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Aris Paschalidis. Author, maintainer. OJ Watson. Author.","code":""},{"path":"https://bailey-lab.github.io/coiaf/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Paschalidis , Watson O (2023). coiaf: Complexity Infection Estimation Allele Frequencies. https://bailey-lab.github.io/coiaf/, https://github.com/bailey-lab/coiaf.","code":"@Manual{,   title = {coiaf: Complexity of Infection Estimation with Allele Frequencies},   author = {Aris Paschalidis and OJ Watson},   year = {2023},   note = {https://bailey-lab.github.io/coiaf/, https://github.com/bailey-lab/coiaf}, }"},{"path":[]},{"path":"https://bailey-lab.github.io/coiaf/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Complexity of Infection Estimation with Allele Frequencies","text":"malaria, individuals often infected different parasite strains, complexity infection (COI) giving number genetically different parasite strains individual. Changes mean COI population shown informative changes transmission intensity number probabilistic likelihood Bayesian models now developed estimate COI. However, rapid, direct measures based heterozygosity FwS directly related COI. package features two rapid, direct measures characterizing polyclonal infections.","code":""},{"path":"https://bailey-lab.github.io/coiaf/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Complexity of Infection Estimation with Allele Frequencies","text":"","code":"# Install most recent released version devtools::install_github(\"bailey-lab/coiaf@v0.1.2\")"},{"path":"https://bailey-lab.github.io/coiaf/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Complexity of Infection Estimation with Allele Frequencies","text":"order run real data, please refer Articles drop-menu. Several articles detail algorithm works, data simulated test algorithm, , importantly, run real data. short example running real data included outlines necessary data structure commands run.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/bootstrap_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate bootstrapped CI — bootstrap_ci","title":"Generate bootstrapped CI — bootstrap_ci","text":"Generate bootstrapped confidence interval COI estimates.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/bootstrap_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate bootstrapped CI — bootstrap_ci","text":"","code":"bootstrap_ci(   data,   max_coi = 25,   seq_error = 0.01,   coi_method = c(\"variant\", \"frequency\"),   solution_method = c(\"discrete\", \"continuous\"),   use_bins = FALSE,   bin_size = 20,   replicates = 100,   parallel = FALSE,   ncpus = 8 )  # S3 method for default bootstrap_ci(   data,   max_coi = 25,   seq_error = 0.01,   coi_method = c(\"variant\", \"frequency\"),   solution_method = c(\"discrete\", \"continuous\"),   use_bins = FALSE,   bin_size = 20,   replicates = 100,   parallel = FALSE,   ncpus = 8 )  # S3 method for sim bootstrap_ci(   data,   max_coi = 25,   seq_error = 0.01,   coi_method = c(\"variant\", \"frequency\"),   solution_method = c(\"discrete\", \"continuous\"),   use_bins = FALSE,   bin_size = 20,   replicates = 100,   parallel = FALSE,   ncpus = 8 )"},{"path":"https://bailey-lab.github.io/coiaf/reference/bootstrap_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate bootstrapped CI — bootstrap_ci","text":"data data COI computed. max_coi number indicating maximum COI compare simulated data . seq_error level sequencing error assumed. value inputted, infer level sequence error. coi_method method use generate theoretical relationship. method either \"variant\" \"frequency\". default value \"variant\". solution_method Whether estimate discrete continuous COIs. use_bins argument longer supported; estimate COI, data points used. Data points grouped bins changing plaf. bin_size argument longer supported; estimate COI, data points used. Data points grouped bins changing plaf. replicates number bootstrap replicates. parallel Whether parallelize confidence interval calculation. Note parallelization works non-Windows machines. ncpus number processes used parallel operation.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/bootstrap_ci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate bootstrapped CI — bootstrap_ci","text":"tibble() columns: coi mean COI. bias Bias statistic. std.error standard error statistic. conf.low lower 95% confidence interval. conf.high upper 95% confidence interval.","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/coiaf/reference/bootstrap_ci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate bootstrapped CI — bootstrap_ci","text":"","code":"sim_data <- sim_biallelic(coi = 5, plmaf = runif(100, 0, 0.5)) bootstrap_ci(sim_data, solution_method = \"continuous\") #> # A tibble: 1 × 6 #>     coi estimates        bias std.error conf.low conf.high #>   <dbl> <list>          <dbl>     <dbl>    <dbl>     <dbl> #> 1  3.83 <dbl [100 × 1]> 0.206     0.717     2.84      5.74"},{"path":"https://bailey-lab.github.io/coiaf/reference/coiaf-package.html","id":null,"dir":"Reference","previous_headings":"","what":"coiaf: Complexity of Infection Estimation with Allele Frequencies — coiaf-package","title":"coiaf: Complexity of Infection Estimation with Allele Frequencies — coiaf-package","text":"Provides direct method estimating complexity infection using easily calculated measures sequence read depth data.","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/coiaf/reference/coiaf-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"coiaf: Complexity of Infection Estimation with Allele Frequencies — coiaf-package","text":"Maintainer: Aris Paschalidis aris_paschalidis@brown.edu (ORCID) Authors: OJ Watson oj.watson@hotmail.co.uk (ORCID)","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/compute_coi.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict the COI — compute_coi","title":"Predict the COI — compute_coi","text":"Predict COI sample.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/compute_coi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict the COI — compute_coi","text":"","code":"compute_coi(   data,   data_type,   max_coi = 25,   seq_error = 0.01,   bin_size = 20,   comparison = \"overall\",   distance = \"squared\",   coi_method = \"variant\",   use_bins = FALSE )"},{"path":"https://bailey-lab.github.io/coiaf/reference/compute_coi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict the COI — compute_coi","text":"data data COI computed. data_type type data analyzed. One \"sim\" \"real\". max_coi number indicating maximum COI compare simulated data . seq_error level sequencing error assumed. value inputted, infer level sequence error. bin_size argument longer supported; estimate COI, data points used. Data points grouped bins changing plaf. comparison argument longer supported; function compare theoretical curve sample curve PLMAFs. distance argument longer supported; function solve weighted least squares minimization problem. coi_method method use generate theoretical relationship. method either \"variant\" \"frequency\". default value \"variant\". use_bins argument longer supported; estimate COI, data points used. Data points grouped bins changing plaf.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/compute_coi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict the COI — compute_coi","text":"list following: coi: predicted COI sample. probability: probability density function representing probability COI.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/compute_coi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict the COI — compute_coi","text":"Compare within sample allele frequency (WSMAF) population level allele frequency (PLMAF) sample theoretical WSMAF PLMAF look like. examining sample's WSMAF PLMAF theoretical WSMAF PLMAF, estimation can made COI sample . refer sample's WSMAF vs PLMAF \"sample curve\" refer theoretical WSMAF vs PLMAF \"theoretical curve.\" determine predicted COI value, one three different methods can selected: end Determines distance theoretical sample curve PLMAF 0.5. COI whichever theoretical COI curve smallest distance simulated data. ideal Determines distance theoretical sample curve ideal PLMAF. ideal PLMAF calculated looking change COI \\(\\) COI \\(-1\\) finding PLMAF distance maximized. COI whichever theoretical COI curve smallest distance simulated data ideal PLMAF. overall Determines distance theoretical simulated curve PLMAFs. Computes distance theoretical curves simulated curve. COI whichever theoretical curve smallest distance simulated curve. option choose one several distance metrics: abs_sum: Absolute value sum difference. sum_abs: Sum absolute difference. squared: Sum squared difference.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/compute_coi_regression.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute COI based on residuals of all loci against theoretical curves — compute_coi_regression","title":"Compute COI based on residuals of all loci against theoretical curves — compute_coi_regression","text":"Compute COI based residuals loci theoretical curves","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/compute_coi_regression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute COI based on residuals of all loci against theoretical curves — compute_coi_regression","text":"","code":"compute_coi_regression(   data,   data_type,   max_coi = 25,   seq_error = 0.01,   distance = \"squared\",   coi_method = \"variant\",   seq_error_bin_size = 20 )"},{"path":"https://bailey-lab.github.io/coiaf/reference/compute_coi_regression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute COI based on residuals of all loci against theoretical curves — compute_coi_regression","text":"data data COI computed. data_type type data analyzed. One \"sim\" \"real\". max_coi number indicating maximum COI compare simulated data . seq_error level sequencing error assumed. value inputted, infer level sequence error. distance argument longer supported; function solve weighted least squares minimization problem. coi_method method use generate theoretical relationship. method either \"variant\" \"frequency\". default value \"variant\". seq_error_bin_size Number loci smallest bin estimating sequence error","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/compute_coi_regression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute COI based on residuals of all loci against theoretical curves — compute_coi_regression","text":"list following: coi: predicted COI sample. probability: probability density function representing probability COI.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/cont_sensitivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Continuous sensitivity analysis — cont_sensitivity","title":"Continuous sensitivity analysis — cont_sensitivity","text":"Runs several iterations full COI sensitivity analysis varying parameters.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/cont_sensitivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Continuous sensitivity analysis — cont_sensitivity","text":"","code":"cont_sensitivity(   repetitions = 10,   coi = 3,   max_coi = 25,   plmaf = runif(1000, 0, 0.5),   coverage = 200,   alpha = 1,   overdispersion = 0,   relatedness = 0,   epsilon = 0,   seq_error = 0.01,   bin_size = 20,   comparison = \"overall\",   distance = \"squared\",   coi_method = \"variant\",   use_bins = FALSE )"},{"path":"https://bailey-lab.github.io/coiaf/reference/cont_sensitivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Continuous sensitivity analysis — cont_sensitivity","text":"repetitions number times sample run. coi Complexity infection. max_coi number indicating maximum COI compare simulated data . plmaf Vector population-level minor allele frequencies locus. coverage Coverage locus. single value supplied coverage applied loci. alpha Shape parameter symmetric Dirichlet prior strain proportions. overdispersion extent counts -dispersed relative binomial distribution. Counts Beta-Binomially distributed, beta distribution shape parameters \\(\\frac{p}{overdispersion}\\) \\(\\frac{1-p}{overdispersion}\\). relatedness probability strain mixed infections related another. implementation similar relatedness defined REAL McCOIL simulations (doi:10.1371/journal.pcbi.1005348 ): \"... simulated relatedness (r) among lineages within host sampling alleles either existing lineage within host (probability r) population (probability (1-r)).\" epsilon probability single read miscalled allele. error applied directions. seq_error level sequencing error assumed. value inputted, infer level sequence error. bin_size argument longer supported; estimate COI, data points used. Data points grouped bins changing plaf. comparison argument longer supported; function compare theoretical curve sample curve PLMAFs. distance argument longer supported; function solve weighted least squares minimization problem. coi_method method use generate theoretical relationship. method either \"variant\" \"frequency\". default value \"variant\". use_bins argument longer supported; estimate COI, data points used. Data points grouped bins changing plaf.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/cont_sensitivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Continuous sensitivity analysis — cont_sensitivity","text":"list following: predicted_coi: dataframe predicted COIs. COIs predicted using compute_coi(). column represents separate set parameters. row represents predicted COI. Predictions done many times, depending value repetitions. probability:list matrices containing probability model predicted COI value. row contains probability different run. first row contains average probabilities runs. param_grid: parameter grid. parameter grid possible combinations parameters inputted. row represents unique combination. boot_error: dataframe containing information error algorithm. first column indicates COI fed simulation. columns indicate mean absolute error (mae), lower upper bounds 95% confidence interval bias.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/disc_sensitivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Discrete Sensitivity analysis — disc_sensitivity","title":"Discrete Sensitivity analysis — disc_sensitivity","text":"Runs several iterations full COI sensitivity analysis varying parameters.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/disc_sensitivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discrete Sensitivity analysis — disc_sensitivity","text":"","code":"disc_sensitivity(   repetitions = 10,   coi = 3,   max_coi = 25,   plmaf = runif(1000, 0, 0.5),   coverage = 200,   alpha = 1,   overdispersion = 0,   relatedness = 0,   epsilon = 0,   seq_error = 0.01,   bin_size = 20,   comparison = \"overall\",   distance = \"squared\",   coi_method = \"variant\",   use_bins = FALSE )"},{"path":"https://bailey-lab.github.io/coiaf/reference/disc_sensitivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discrete Sensitivity analysis — disc_sensitivity","text":"repetitions number times sample run. coi Complexity infection. max_coi number indicating maximum COI compare simulated data . plmaf Vector population-level minor allele frequencies locus. coverage Coverage locus. single value supplied coverage applied loci. alpha Shape parameter symmetric Dirichlet prior strain proportions. overdispersion extent counts -dispersed relative binomial distribution. Counts Beta-Binomially distributed, beta distribution shape parameters \\(\\frac{p}{overdispersion}\\) \\(\\frac{1-p}{overdispersion}\\). relatedness probability strain mixed infections related another. implementation similar relatedness defined REAL McCOIL simulations (doi:10.1371/journal.pcbi.1005348 ): \"... simulated relatedness (r) among lineages within host sampling alleles either existing lineage within host (probability r) population (probability (1-r)).\" epsilon probability single read miscalled allele. error applied directions. seq_error level sequencing error assumed. value inputted, infer level sequence error. bin_size argument longer supported; estimate COI, data points used. Data points grouped bins changing plaf. comparison argument longer supported; function compare theoretical curve sample curve PLMAFs. distance argument longer supported; function solve weighted least squares minimization problem. coi_method method use generate theoretical relationship. method either \"variant\" \"frequency\". default value \"variant\". use_bins argument longer supported; estimate COI, data points used. Data points grouped bins changing plaf.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/disc_sensitivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discrete Sensitivity analysis — disc_sensitivity","text":"list following: predicted_coi: dataframe predicted COIs. COIs predicted using compute_coi(). column represents separate set parameters. row represents predicted COI. Predictions done many times, depending value repetitions. probability:list matrices containing probability model predicted COI value. row contains probability different run. first row contains average probabilities runs. param_grid: parameter grid. parameter grid possible combinations parameters inputted. row represents unique combination. boot_error: dataframe containing information error algorithm. first column indicates COI fed simulation. columns indicate mean absolute error (mae), lower upper bounds 95% confidence interval bias.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/distance_curves.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute distance between two curves — distance_curves","title":"Compute distance between two curves — distance_curves","text":"Compute distance two curves using several methods. abs_sum Absolute value sum difference. sum_abs Sum absolute difference. squared Sum squared difference.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/distance_curves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute distance between two curves — distance_curves","text":"","code":"distance_curves(processed_data, theory_cois, distance = \"squared\")"},{"path":"https://bailey-lab.github.io/coiaf/reference/distance_curves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute distance between two curves — distance_curves","text":"theory_cois theoretical COI curves. distance argument longer supported; function solve weighted least squares minimization problem.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/distance_curves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute distance between two curves — distance_curves","text":"list following: coi predicted COI simulation. dist distance theoretical COI simulated COI curve.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/error_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Error plot — error_plot","title":"Error plot — error_plot","text":"Creates plot showing error sensitivity analysis.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/error_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Error plot — error_plot","text":"","code":"error_plot(   data,   fill = \"coi\",   fill_levels = NULL,   title = NULL,   legend_title = fill,   legend.position = \"right\",   second_fill = NULL )"},{"path":"https://bailey-lab.github.io/coiaf/reference/error_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Error plot — error_plot","text":"data data plotted. fill variable data separated . fill_levels levels fill variable. title title plot. Default NULL. legend_title text legend. Default NULL. legend.position position legend. One \"none\", \"left\", \"right\", \"bottom\", \"top\". second_fill Indicates second fill variable .","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/error_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Error plot — error_plot","text":"Plots created using ggplot2::geom_col(), creates simple bar plot. mean absolute error plotted various colors, according parameter tested. addition 95% confidence interval shown black vertical lines.","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/coiaf/reference/example_real_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Example real data — example_real_data","title":"Example real data — example_real_data","text":"small example dataset contains within-sample allele frequencies (WSAFs) sample individuals.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/example_real_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example real data — example_real_data","text":"matrix data. rows matrix indicate sample name columns matrix indicate WSAF locus.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/example_real_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example real data — example_real_data","text":"ftp://ngs.sanger.ac.uk/production/malaria/pfcommunityproject/Pf6/","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/likelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"Likelihood of a COI — likelihood","title":"Likelihood of a COI — likelihood","text":"function generate likelihood specific COI value.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/likelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Likelihood of a COI — likelihood","text":"","code":"likelihood(coi, processed_data, distance = \"squared\", coi_method = \"variant\")"},{"path":"https://bailey-lab.github.io/coiaf/reference/likelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Likelihood of a COI — likelihood","text":"coi COI likelihood generated. processed_data processed COI data. output process_sim() process_real(). distance argument longer supported; function solve weighted least squares minimization problem. coi_method method use generate theoretical relationship. method either \"variant\" \"frequency\". default value \"variant\".","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/likelihood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Likelihood of a COI — likelihood","text":"likelihood specific COI value.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/likelihood.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Likelihood of a COI — likelihood","text":"likelihood can thought distance two curves: \"real\" COI curve, generated inputted data, \"simulated\" COI curve, depends COI value specified. three different methods implemented compute distance two curves: abs_sum: Absolute value sum difference. sum_abs: Sum absolute difference. squared: Sum squared difference.","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/coiaf/reference/optimize_coi.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize the COI — optimize_coi","title":"Optimize the COI — optimize_coi","text":"function compute COI inputted data.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/optimize_coi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize the COI — optimize_coi","text":"","code":"optimize_coi(   data,   data_type,   max_coi = 25,   seq_error = 0.01,   bin_size = 20,   distance = \"squared\",   coi_method = \"variant\",   use_bins = FALSE )"},{"path":"https://bailey-lab.github.io/coiaf/reference/optimize_coi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize the COI — optimize_coi","text":"data data COI computed. data_type type data analyzed. One \"sim\" \"real\". max_coi number indicating maximum COI compare simulated data . seq_error level sequencing error assumed. value inputted, infer level sequence error. bin_size argument longer supported; estimate COI, data points used. Data points grouped bins changing plaf. distance argument longer supported; function solve weighted least squares minimization problem. coi_method method use generate theoretical relationship. method either \"variant\" \"frequency\". default value \"variant\". use_bins argument longer supported; estimate COI, data points used. Data points grouped bins changing plaf.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/optimize_coi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimize the COI — optimize_coi","text":"predicted COI value.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/optimize_coi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimize the COI — optimize_coi","text":"function utilizes stats::optim(). particular, function utilizes quasi-Newton method compute gradients build picture surface optimized. function uses likelihood function defined likelihood().","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/coiaf/reference/optimize_coi_regression.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute COI based on all points fitted to best fitting curve for COI — optimize_coi_regression","title":"Compute COI based on all points fitted to best fitting curve for COI — optimize_coi_regression","text":"Compute COI based points fitted best fitting curve COI","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/optimize_coi_regression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute COI based on all points fitted to best fitting curve for COI — optimize_coi_regression","text":"","code":"optimize_coi_regression(   data,   data_type,   max_coi = 25,   seq_error = 0.01,   distance = \"squared\",   coi_method = \"variant\",   seq_error_bin_size = 20 )"},{"path":"https://bailey-lab.github.io/coiaf/reference/optimize_coi_regression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute COI based on all points fitted to best fitting curve for COI — optimize_coi_regression","text":"data data COI computed. data_type type data analyzed. One \"sim\" \"real\". max_coi number indicating maximum COI compare simulated data . seq_error level sequencing error assumed. value inputted, infer level sequence error. distance argument longer supported; function solve weighted least squares minimization problem. coi_method method use generate theoretical relationship. method either \"variant\" \"frequency\". default value \"variant\". seq_error_bin_size Number loci smallest bin estimating sequence error","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/optimize_coi_regression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute COI based on all points fitted to best fitting curve for COI — optimize_coi_regression","text":"predicted COI value.","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/coiaf/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://bailey-lab.github.io/coiaf/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/plot-simulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot simulated data — plot-simulation","title":"Plot simulated data — plot-simulation","text":"Generate simple plot visualizing simulated data. Compares derived WSMAF PLMAF.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/plot-simulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot simulated data — plot-simulation","text":"","code":"# S3 method for sim autoplot(object, ...)  # S3 method for sim plot(x, ...)"},{"path":"https://bailey-lab.github.io/coiaf/reference/plot-simulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot simulated data — plot-simulation","text":"object, x object class sim. Derived output sim_biallelic(). ... arguments passed methods.","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/coiaf/reference/plot-simulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot simulated data — plot-simulation","text":"","code":"plot(sim_biallelic(coi = 2))  plot(sim_biallelic(coi = 5))"},{"path":"https://bailey-lab.github.io/coiaf/reference/process.html","id":null,"dir":"Reference","previous_headings":"","what":"Process data — process","title":"Process data — process","text":"Helper function process data","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/process.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process data — process","text":"","code":"process(   wsmaf,   plmaf,   coverage,   seq_error = 0.01,   bin_size = 20,   coi_method = \"variant\" )"},{"path":"https://bailey-lab.github.io/coiaf/reference/process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process data — process","text":"wsmaf within-sample minor allele frequency. plmaf population-level minor allele frequency. coverage read coverage locus. seq_error level sequencing error assumed. value inputted, infer level sequence error. bin_size argument longer supported; estimate COI, data points used. Data points grouped bins changing plaf. coi_method method use generate theoretical relationship. method either \"variant\" \"frequency\". default value \"variant\".","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/process.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process data — process","text":"list following: data: tibble plmaf_cut: Breaks form [, b). m_variant: average WSMAF proportion variant sites segment defined plmaf_cut. bucket_size: number loci bucket. midpoints: midpoint bucket. seq_error: sequence error inferred. bin_size: minimum size bin. cuts: breaks utilized splitting data. COI.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/process.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process data — process","text":"function computes whether SNP variant site , based simulated WSMAF SNP. process additionally accounts potential sequencing error.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/process_real.html","id":null,"dir":"Reference","previous_headings":"","what":"Process real data — process_real","title":"Process real data — process_real","text":"Generate COI curve real data.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/process_real.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process real data — process_real","text":"","code":"process_real(   wsmaf,   plmaf,   coverage,   seq_error = 0.01,   bin_size = 20,   coi_method = \"variant\" )"},{"path":"https://bailey-lab.github.io/coiaf/reference/process_real.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process real data — process_real","text":"wsmaf within-sample minor allele frequency. plmaf population-level minor allele frequency. coverage read coverage locus. seq_error level sequencing error assumed. value inputted, infer level sequence error. bin_size argument longer supported; estimate COI, data points used. Data points grouped bins changing plaf. coi_method method use generate theoretical relationship. method either \"variant\" \"frequency\". default value \"variant\".","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/process_real.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process real data — process_real","text":"list following: data: tibble plmaf_cut: Breaks form [, b). m_variant: average WSMAF proportion variant sites segment defined plmaf_cut. bucket_size: number loci bucket. midpoints: midpoint bucket. seq_error: sequence error inferred. bin_size: minimum size bin. cuts: breaks utilized splitting data. COI.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/process_real.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process real data — process_real","text":"function computes whether SNP variant site , based WSMAF SNP. process additionally accounts potential sequencing error.","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/coiaf/reference/process_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Process simulated data — process_sim","title":"Process simulated data — process_sim","text":"Generate simulated COI curve.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/process_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process simulated data — process_sim","text":"","code":"process_sim(sim, seq_error = 0.01, bin_size = 20, coi_method = \"variant\")"},{"path":"https://bailey-lab.github.io/coiaf/reference/process_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process simulated data — process_sim","text":"sim Output sim_biallelic(). seq_error level sequencing error assumed. value inputted, infer level sequence error. bin_size argument longer supported; estimate COI, data points used. Data points grouped bins changing plaf. coi_method method use generate theoretical relationship. method either \"variant\" \"frequency\". default value \"variant\".","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/process_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process simulated data — process_sim","text":"list following: data: tibble plmaf_cut: Breaks form [, b). m_variant: average WSMAF proportion variant sites segment defined plmaf_cut. bucket_size: number loci bucket. midpoints: midpoint bucket. seq_error: sequence error inferred. bin_size: minimum size bin. cuts: breaks utilized splitting data. COI.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/process_sim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process simulated data — process_sim","text":"Utilize output sim_biallelic(), creates simulated data. PLMAF kept, function computes whether SNP variant site , based simulated WSMAF SNP. process additionally accounts potential sequencing error. check whether simulated WSMAF correctly indicated variant site , phased haplotype parasites computed.","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/coiaf/reference/rbetabinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Beta-binomial distribution — rbetabinom","title":"Beta-binomial distribution — rbetabinom","text":"Draw Beta-binomial distribution.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/rbetabinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beta-binomial distribution — rbetabinom","text":"","code":"rbetabinom(n = 1, k = 10, alpha = 1, beta = 1)"},{"path":"https://bailey-lab.github.io/coiaf/reference/rbetabinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Beta-binomial distribution — rbetabinom","text":"n Number draws. k Number binomial trials. alpha First shape parameter beta distribution. beta Second shape parameter beta distribution.","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/coiaf/reference/rbetabinom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Beta-binomial distribution — rbetabinom","text":"","code":"coiaf:::rbetabinom() #> [1] 1 coiaf:::rbetabinom(n = 10, k = 10) #>  [1] 5 4 6 4 0 4 3 6 5 2"},{"path":"https://bailey-lab.github.io/coiaf/reference/rdirichlet.html","id":null,"dir":"Reference","previous_headings":"","what":"Dirichlet distribution — rdirichlet","title":"Dirichlet distribution — rdirichlet","text":"Draw Dirichlet distribution given vector shape parameters. number observations inferred length shape vector.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/rdirichlet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dirichlet distribution — rdirichlet","text":"","code":"rdirichlet(shape = rep(1, 3))"},{"path":"https://bailey-lab.github.io/coiaf/reference/rdirichlet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dirichlet distribution — rdirichlet","text":"shape Vector shape parameters.","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/coiaf/reference/rdirichlet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dirichlet distribution — rdirichlet","text":"","code":"coiaf:::rdirichlet(c(1, 1, 1)) #> [1] 0.6761773 0.1351698 0.1886529 coiaf:::rdirichlet(c(1, 3, 2)) #> [1] 0.006314457 0.591661871 0.402023672"},{"path":"https://bailey-lab.github.io/coiaf/reference/sensitivity_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Sensitivity plot — sensitivity_plot","title":"Sensitivity plot — sensitivity_plot","text":"Creates plot sensitivity analysis.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/sensitivity_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sensitivity plot — sensitivity_plot","text":"","code":"sensitivity_plot(   data,   dims,   result_type,   sub_title = NULL,   title = NULL,   caption = NULL )"},{"path":"https://bailey-lab.github.io/coiaf/reference/sensitivity_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sensitivity plot — sensitivity_plot","text":"data data plotted. dims list representing number rows columns plots split . result_type indicator indicates count boxplot plotted. sub_title list titles individual subplot. title title overall figure. caption caption overall figure.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/sensitivity_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sensitivity plot — sensitivity_plot","text":"Creates grid plots. plot created using ggplot2::geom_count(). number observations location counted count mapped point area plot. x-axis true COI, y-axis estimated COI. counts plotted blue, red line drawn equation \\(y = x\\). line indicates blue circles algorithm 100% correct.","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/coiaf/reference/sensitivity_plot_element.html","id":null,"dir":"Reference","previous_headings":"","what":"Single sensitivity plot — sensitivity_plot_element","title":"Single sensitivity plot — sensitivity_plot_element","text":"Creates single plot sensitivity analysis. Used helper function sensitivity_plot().","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/sensitivity_plot_element.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single sensitivity plot — sensitivity_plot_element","text":"","code":"sensitivity_plot_element(data, loop_num, result_type, sub_title)"},{"path":"https://bailey-lab.github.io/coiaf/reference/sensitivity_plot_element.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single sensitivity plot — sensitivity_plot_element","text":"data data plotted. loop_num loop number. Represents many total panels plotted. result_type indicator indicates count boxplot plotted. sub_title list titles individual subplot.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/sim_biallelic.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate biallelic data — sim_biallelic","title":"Simulate biallelic data — sim_biallelic","text":"Simulate biallelic data simple statistical model. Inputs include complexity infection (COI), population-level minor allele frequencies (PLMAF), parameters dictating skew error distributions. Outputs include phased haplotypes unphased read count coverage data.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/sim_biallelic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate biallelic data — sim_biallelic","text":"","code":"sim_biallelic(   coi,   plmaf = runif(10, 0, 0.5),   coverage = 200,   alpha = 1,   overdispersion = 0,   relatedness = 0,   epsilon = 0 )"},{"path":"https://bailey-lab.github.io/coiaf/reference/sim_biallelic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate biallelic data — sim_biallelic","text":"coi Complexity infection. plmaf Vector population-level minor allele frequencies locus. coverage Coverage locus. single value supplied coverage applied loci. alpha Shape parameter symmetric Dirichlet prior strain proportions. overdispersion extent counts -dispersed relative binomial distribution. Counts Beta-Binomially distributed, beta distribution shape parameters \\(\\frac{p}{overdispersion}\\) \\(\\frac{1-p}{overdispersion}\\). relatedness probability strain mixed infections related another. implementation similar relatedness defined REAL McCOIL simulations (doi:10.1371/journal.pcbi.1005348 ): \"... simulated relatedness (r) among lineages within host sampling alleles either existing lineage within host (probability r) population (probability (1-r)).\" epsilon probability single read miscalled allele. error applied directions.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/sim_biallelic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate biallelic data — sim_biallelic","text":"object class sim. Contains list tibbles: parameters contains parameter value used simulate data. strain_proportions contains proportion strain. phased_haplotypes contains phased haplotype strain locus. data contains following columns: plmaf: population-level minor allele frequency. coverage: coverage locus. counts: count locus. wsaf: within-sample minor allele frequency.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/sim_biallelic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate biallelic data — sim_biallelic","text":"Simulated data drawn simple statistical model: Strain proportions drawn symmetric Dirichlet distribution shape parameter alpha. Phased haplotypes drawn every locus, one coi. allele locus drawn Bernoulli distribution probability given plmaf. \"true\" within-sample allele frequency every locus obtained multiplying haplotypes strain proportions, summing haplotypes. Errors introduced equation \\[wsmaf_{error} = wsmaf(1-e) + (1-wsmaf)e\\] \\(wsmaf\\) WSMAF without error \\(e\\) error parameter epsilon. Final read counts drawn beta-binomial distribution expectation \\(w_{error}\\). raw number draws given coverage, skew distribution given overdispersion parameter. overdispersion equal zero, distribution binomial, rather beta-binomial.","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/coiaf/reference/sim_biallelic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate biallelic data — sim_biallelic","text":"","code":"sim_biallelic(coi = 5) #> $parameters #> # A tibble: 5 × 2 #>   parameter      value #>   <chr>          <dbl> #> 1 coi                5 #> 2 alpha              1 #> 3 overdispersion     0 #> 4 relatedness        0 #> 5 epsilon            0 #>  #> $strain_proportions #> # A tibble: 5 × 1 #>   proportion #>        <dbl> #> 1      0.229 #> 2      0.170 #> 3      0.233 #> 4      0.156 #> 5      0.212 #>  #> $phased_haplotypes #> # A tibble: 5 × 10 #>   locus_1 locus_2 locus_3 locus_4 locus_5 locus_6 locus_7 locus_8 locus_9 #>     <int>   <int>   <int>   <int>   <int>   <int>   <int>   <int>   <int> #> 1       1       0       0       0       1       1       0       0       0 #> 2       0       0       0       0       0       0       0       0       0 #> 3       0       0       1       0       0       0       0       0       0 #> 4       1       0       0       1       0       1       1       0       0 #> 5       0       0       0       0       1       0       0       0       0 #> # ℹ 1 more variable: locus_10 <int> #>  #> $data #> # A tibble: 10 × 4 #>     plmaf coverage counts wsmaf #>     <dbl>    <dbl>  <int> <dbl> #>  1 0.157       200     68 0.34  #>  2 0.218       200      0 0     #>  3 0.200       200     42 0.21  #>  4 0.411       200     23 0.115 #>  5 0.242       200     90 0.45  #>  6 0.214       200     64 0.32  #>  7 0.0873      200     35 0.175 #>  8 0.0618      200      0 0     #>  9 0.114       200      0 0     #> 10 0.454       200     87 0.435 #>  #> attr(,\"class\") #> [1] \"sim\""},{"path":"https://bailey-lab.github.io/coiaf/reference/single_sensitivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Single sensitivity analysis — single_sensitivity","title":"Single sensitivity analysis — single_sensitivity","text":"Runs single full COI sensitivity analysis.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/single_sensitivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single sensitivity analysis — single_sensitivity","text":"","code":"single_sensitivity(   disc_or_cont,   coi = 3,   max_coi = 25,   plmaf = runif(1000, 0, 0.5),   coverage = 200,   alpha = 1,   overdispersion = 0,   relatedness = 0,   epsilon = 0,   seq_error = 0.01,   bin_size = 20,   comparison = \"overall\",   distance = \"squared\",   coi_method = \"variant\",   use_bins = FALSE )"},{"path":"https://bailey-lab.github.io/coiaf/reference/single_sensitivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single sensitivity analysis — single_sensitivity","text":"disc_or_cont Whether run discrete continuous COI estimation. coi Complexity infection. max_coi number indicating maximum COI compare simulated data . plmaf Vector population-level minor allele frequencies locus. coverage Coverage locus. single value supplied coverage applied loci. alpha Shape parameter symmetric Dirichlet prior strain proportions. overdispersion extent counts -dispersed relative binomial distribution. Counts Beta-Binomially distributed, beta distribution shape parameters \\(\\frac{p}{overdispersion}\\) \\(\\frac{1-p}{overdispersion}\\). relatedness probability strain mixed infections related another. implementation similar relatedness defined REAL McCOIL simulations (doi:10.1371/journal.pcbi.1005348 ): \"... simulated relatedness (r) among lineages within host sampling alleles either existing lineage within host (probability r) population (probability (1-r)).\" epsilon probability single read miscalled allele. error applied directions. seq_error level sequencing error assumed. value inputted, infer level sequence error. bin_size argument longer supported; estimate COI, data points used. Data points grouped bins changing plaf. comparison argument longer supported; function compare theoretical curve sample curve PLMAFs. distance argument longer supported; function solve weighted least squares minimization problem. coi_method method use generate theoretical relationship. method either \"variant\" \"frequency\". default value \"variant\". use_bins argument longer supported; estimate COI, data points used. Data points grouped bins changing plaf.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/single_sensitivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Single sensitivity analysis — single_sensitivity","text":"Predicted COI value.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/theme_coiaf.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom ggplot2 theme — theme_coiaf","title":"Custom ggplot2 theme — theme_coiaf","text":"Custom ggplot2 theme","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/theme_coiaf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom ggplot2 theme — theme_coiaf","text":"","code":"theme_coiaf(   base_size = 10,   base_family = \"\",   base_line_size = base_size/22,   base_rect_size = base_size/22 )"},{"path":"https://bailey-lab.github.io/coiaf/reference/theme_coiaf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom ggplot2 theme — theme_coiaf","text":"base_size base font size, given pts. base_family base font family base_line_size base size line elements base_rect_size base size rect elements","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/theme_coiaf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Custom ggplot2 theme — theme_coiaf","text":"","code":"library(\"ggplot2\") p <- ggplot(mtcars, aes(x = wt, y = mpg, colour = factor(gear))) +   geom_point() +   facet_wrap(~am) +   geom_smooth(method = \"lm\", se = FALSE)  p + theme_coiaf() #> `geom_smooth()` using formula = 'y ~ x'"},{"path":"https://bailey-lab.github.io/coiaf/reference/theoretical_coi.html","id":null,"dir":"Reference","previous_headings":"","what":"Theoretical COI — theoretical_coi","title":"Theoretical COI — theoretical_coi","text":"Generate theoretical relationship WSMAF (\\(\\bf{w}\\)), PLMAF (\\(\\bf{p}\\)), COI (\\(k\\)).","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/theoretical_coi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theoretical COI — theoretical_coi","text":"","code":"theoretical_coi(   coi_range,   plmaf = seq(0, 0.5, length.out = 101),   coi_method = c(\"variant\", \"frequency\") )"},{"path":"https://bailey-lab.github.io/coiaf/reference/theoretical_coi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theoretical COI — theoretical_coi","text":"coi_range COIs relationship generated. plmaf population-level minor allele frequency relationship generated. coi_method method use generate theoretical relationship. method either \"variant\" \"frequency\". default value \"variant\".","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/theoretical_coi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theoretical COI — theoretical_coi","text":"tibble() containing generated values. column named COI used. last column tibble contains PLMAF.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/theoretical_coi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theoretical COI — theoretical_coi","text":"","code":"theoretical_coi(1:5) #> # A tibble: 101 × 6 #>    coi_1   coi_2  coi_3  coi_4  coi_5 plmaf #>    <dbl>   <dbl>  <dbl>  <dbl>  <dbl> <dbl> #>  1     0 0       0      0      0      0     #>  2     0 0.00995 0.0149 0.0199 0.0248 0.005 #>  3     0 0.0198  0.0297 0.0394 0.0490 0.01  #>  4     0 0.0295  0.0443 0.0587 0.0728 0.015 #>  5     0 0.0392  0.0588 0.0776 0.0961 0.02  #>  6     0 0.0488  0.0731 0.0963 0.119  0.025 #>  7     0 0.0582  0.0873 0.115  0.141  0.03  #>  8     0 0.0676  0.101  0.133  0.163  0.035 #>  9     0 0.0768  0.115  0.151  0.185  0.04  #> 10     0 0.0859  0.129  0.168  0.206  0.045 #> # ℹ 91 more rows theoretical_coi(1:5, coi_method = \"frequency\") #> # A tibble: 101 × 6 #>    coi_1   coi_2   coi_3   coi_4   coi_5 plmaf #>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl> <dbl> #>  1   NaN NaN     NaN     NaN     NaN     0     #>  2   NaN   0.500   0.335   0.252   0.202 0.005 #>  3   NaN   0.500   0.337   0.254   0.204 0.01  #>  4   NaN   0.500   0.338   0.256   0.206 0.015 #>  5   NaN   0.500   0.340   0.258   0.208 0.02  #>  6   NaN   0.500   0.342   0.260   0.210 0.025 #>  7   NaN   0.50    0.343   0.262   0.212 0.03  #>  8   NaN   0.5     0.345   0.264   0.214 0.035 #>  9   NaN   0.5     0.347   0.265   0.217 0.04  #> 10   NaN   0.5     0.348   0.268   0.219 0.045 #> # ℹ 91 more rows"},{"path":"https://bailey-lab.github.io/coiaf/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"page lists tidy eval tools reexported package rlang. learn using tidy eval scripts packages high level, see dplyr programming vignette ggplot2 packages vignette. Metaprogramming section Advanced R may also useful deeper dive. tidy eval operators {{, !!, !!! syntactic constructs specially interpreted tidy eval functions. mostly need {{, !! !!! advanced operators use simple cases. curly-curly operator {{ allows tunnel data-variables passed function arguments inside tidy eval functions. {{ designed individual arguments. pass multiple arguments contained dots, use ... normal way.   enquo() enquos() delay execution one several function arguments. former returns single expression, latter returns list expressions. defused, expressions longer evaluate . must injected back evaluation context !! (single expression) !!! (list expressions).   simple case, code equivalent usage {{ ... . Defusing enquo() enquos() needed complex cases, instance need inspect modify expressions way. .data pronoun object represents current slice data. variable name string, use .data pronoun subset variable [[.   Another tidy eval operator :=. makes possible use glue curly-curly syntax LHS =. technical reasons, R language support complex expressions left =, use := workaround.   Many tidy eval functions like dplyr::mutate() dplyr::summarise() give automatic name unnamed inputs. need create sort automatic names , use as_label(). instance, glue-tunnelling syntax can reproduced manually :   Expressions defused enquo() (tunnelled {{) need simple column names, can arbitrarily complex. as_label() handles cases gracefully. code assumes simple column name, use as_name() instead. safer throws error input name expected.","code":"my_function <- function(data, var, ...) {   data %>%     group_by(...) %>%     summarise(mean = mean({{ var }})) } my_function <- function(data, var, ...) {   # Defuse   var <- enquo(var)   dots <- enquos(...)    # Inject   data %>%     group_by(!!!dots) %>%     summarise(mean = mean(!!var)) } my_var <- \"disp\" mtcars %>% summarise(mean = mean(.data[[my_var]])) my_function <- function(data, var, suffix = \"foo\") {   # Use `{{` to tunnel function arguments and the usual glue   # operator `{` to interpolate plain strings.   data %>%     summarise(\"{{ var }}_mean_{suffix}\" := mean({{ var }})) } my_function <- function(data, var, suffix = \"foo\") {   var <- enquo(var)   prefix <- as_label(var)   data %>%     summarise(\"{prefix}_mean_{suffix}\" := mean(!!var)) }"},{"path":"https://bailey-lab.github.io/coiaf/reference/world_map.html","id":null,"dir":"Reference","previous_headings":"","what":"World map plot — world_map","title":"World map plot — world_map","text":"Plot world map showing COI region reads sampled .","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/world_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"World map plot — world_map","text":"","code":"world_map(data, variable, label = NULL, alpha = 0.1, breaks = c(1, 2))"},{"path":"https://bailey-lab.github.io/coiaf/reference/world_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"World map plot — world_map","text":"data data plotted. variable variable data plot. label label variable. alpha alpha value plotted data. breaks breaks color scale.","code":""},{"path":"https://bailey-lab.github.io/coiaf/reference/world_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"World map plot — world_map","text":"Creates world map overlays COI region. magnitude COI indicated color size bubble.","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/coiaf/news/index.html","id":"coiaf-012","dir":"Changelog","previous_headings":"","what":"coiaf 0.1.2","title":"coiaf 0.1.2","text":"Set coverage 200 instead 100 figures examining overall performance sensitivity analysis.","code":""},{"path":[]},{"path":"https://bailey-lab.github.io/coiaf/news/index.html","id":"new-vignettes-0-1-1","dir":"Changelog","previous_headings":"","what":"New vignettes","title":"coiaf 0.1.1","text":"New vignette(\"example_real_data\") illustrates use package real data sets. New vignette(\"sensitivity_analysis_discrete\") describes sensitivity analysis discrete methods. New vignette(\"sensitivity_analysis_continuous\") describes sensitivity analysis continuous methods. New vignette(\"simulator_details\") explains data simulated.","code":""},{"path":"https://bailey-lab.github.io/coiaf/news/index.html","id":"new-features-0-1-1","dir":"Changelog","previous_headings":"","what":"New features","title":"coiaf 0.1.1","text":"New bootstrap_ci() function can used compute bootstrapped confidence interval COI estimates (#24, #25). autoplot plot method written simulated data (#22). Simulated data restructured now assigned class sim (#22). default sequence error threshold set 1%. methods now can estimate COI without grouping data points buckets (#17). Within sample minor allele frequencies now weighed read coverage. coverage supplied, coverage assumed uniform across loci (#16.) New theme_coiaf() creates custom theme package.","code":""},{"path":"https://bailey-lab.github.io/coiaf/news/index.html","id":"bug-fixes-0-1-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"coiaf 0.1.1","text":"Midpoint calculation buckets improved. Previously, buckets consisted single value, combine bucket another bucket. longer let buckets consist single value (#19). estimation methods, bucket now weighed number points bucket (#15). Frequency Method undefined COI less two. suspect COI less two, return NaN. additionally return note indicating COI may one. able compute COI, also return COI estimated methods (#14, #21, #23).","code":""},{"path":"https://bailey-lab.github.io/coiaf/news/index.html","id":"maintenance-0-1-1","dir":"Changelog","previous_headings":"","what":"Maintenance","title":"coiaf 0.1.1","text":"Fix broken links. Deprecate arguments favor newer methods estimate COI. Arguments deprecated include: comparison, distance, use_bins, bin_size (#26). PLAF renamed PLMAF indicate focus minor allele (#13). WSAF renamed WSMAF indicate focus minor allele (#13). Fix partial argument match warnings. Update license year. number dependencies reduced. patchwork used instead ggpubr combining plots. cli now used messages, warnings, errors. Superseded functions replaced alternatives (#6). Functions now exit implicitly visibly (#8). Internal documentation improved. COI methods renamed improved clarity. \"Method 1\" renamed \"Variant Method\" \"Method 2\" renamed \"Frequency Method\" (#9).","code":""},{"path":"https://bailey-lab.github.io/coiaf/news/index.html","id":"coiaf-010","dir":"Changelog","previous_headings":"","what":"coiaf 0.1.0","title":"coiaf 0.1.0","text":"Initial public release.","code":""}]
